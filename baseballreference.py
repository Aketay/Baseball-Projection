import pymongoimport urllib2import timeimport copyfrom bs4 import BeautifulSoupfrom pymongo import MongoClientclient = MongoClient()db = client.Baseball_Referenceposts = db.postsclass AutoVivification(dict):    def __getitem__(self, item):        try:            return dict.__getitem__(self, item)        except KeyError:            value = self[item] = type(self)()            return valueclass BaseballReference:    def __init__(self):        self.playerList = AutoVivification()        self.tempList = []    def getBRPlayers(self,teamName):        websiteString = "http://www.baseball-reference.com/teams/" + teamName+ "/2014.shtml"        try:            sock2 = urllib2.urlopen(websiteString)        except urllib2.HTTPError, e:            urlerrorCode = e.code            print urlerrorCode            print e.fp.read()        dataslerp = sock2.read()        dataderp = dataslerp.replace('&nbsp;', '')        soup = BeautifulSoup(dataderp)        for a in soup.find_all('a', href=True):            for item in test2.my_data:                if item[0] == a.text:                    print a.text , a['href'][11:-6]    def getBatterStats(self):        currentYear = "2013"        websiteString = "http://www.baseball-reference.com/leagues/MLB/"+str(currentYear)+"-value-pitching.shtml"        try:            sock2 = urllib2.urlopen(websiteString)        except urllib2.HTTPError, e:            urlerrorCode = e.code            print urlerrorCode            print e.fp.read()                dataslerp = sock2.read()        dataderp = dataslerp.replace('&nbsp;', ' ')        soup = BeautifulSoup(dataderp)        selects = soup.find_all("table", { "id" : "players_value_pitching" })        for row in selects[0].find_all("tr"):            cells = row.find_all("td")            self.playerList = {}            if len(cells)>0:                self.playerList['Year'] = currentYear                self.playerList['PlayerID'] = cells[1].a['href'][11:-6]                self.playerList['Name'] = cells[1].text.replace('*','')                self.playerList['Age'] = cells[2].text                self.playerList['Tm'] = cells[3].text                self.playerList['IP'] = cells[4].text                self.playerList['G'] = cells[5].text                self.playerList['GS'] = cells[6].text                self.playerList['R'] = cells[7].text                self.playerList['RA9'] = cells[8].text                self.playerList['RA9opp'] = cells[9].text                self.playerList['RA9def'] = cells[10].text                self.playerList['RA9role'] = cells[11].text                self.playerList['PPFp'] = cells[12].text                self.playerList['RA9avg'] = cells[13].text                self.playerList['RAA'] = cells[14].text                self.playerList['WAA'] = cells[15].text                self.playerList['gmLI'] = cells[16].text                self.playerList['WAAadj'] = cells[17].text                self.playerList['WAR'] = cells[18].text                self.playerList['RAR'] = cells[19].text                self.playerList['waaWL%'] = cells[20].text                self.playerList['162WL%'] = cells[21].text                self.playerList['Salary'] = cells[22].text                self.playerList['Acquired'] = cells[23].text                post_id = posts.insert(self.playerList)                post_id    def getBatterStats2(self):            currentYear = "2013"            websiteString = "http://www.baseball-reference.com/leagues/MLB/"+ str(currentYear) +"-batting-pitching.shtml"            try:                sock2 = urllib2.urlopen(websiteString)            except urllib2.HTTPError, e:                urlerrorCode = e.code                print urlerrorCode                print e.fp.read()            dataslerp = sock2.read()            dataderp = dataslerp.replace('&nbsp;', ' ')            soup = BeautifulSoup(dataderp)            selects = soup.find_all("table", { "id" : "players_batting_pitching" })            for row in selects[0].find_all("tr"):                cells = row.find_all("td")                self.playerList = {}                if len(cells)>0:                    self.playerList['Year'] = currentYear                    self.playerList['PlayerID'] = cells[1].a['href'][11:-6]                    self.playerList['Name'] = cells[1].text.replace('*','')                    self.playerList['Age'] = cells[2].text                    self.playerList['Tm'] = cells[3].text                    self.playerList['IP'] = cells[4].text                    self.playerList['G'] = cells[6].text                    self.playerList['PA'] = cells[7].text                    self.playerList['AB'] = cells[8].text                    self.playerList['R'] = cells[9].text                    self.playerList['H'] = cells[10].text                    self.playerList['2B'] = cells[11].text                    self.playerList['3B'] = cells[12].text                    self.playerList['HR'] = cells[13].text                    self.playerList['SB'] = cells[14].text                    self.playerList['CS'] = cells[15].text                    self.playerList['BB'] = cells[16].text                    self.playerList['SO'] = cells[17].text                    self.playerList['BA'] = cells[18].text                    self.playerList['OBP'] = cells[19].text                    self.playerList['SLG'] = cells[20].text                    self.playerList['OPS'] = cells[21].text                    self.playerList['BAbip'] = cells[22].text                    self.playerList['TB'] = cells[23].text                    self.playerList['GDP'] = cells[24].text                    self.playerList['HBP'] = cells[25].text                    self.playerList['SH'] = cells[26].text                    self.playerList['SF'] = cells[27].text                    self.playerList['IBB'] = cells[28].text                    self.playerList['ROE'] = cells[29].text                    # print self.playerList                    post_id = posts.insert(self.playerList)                    post_id    def dict_merge(self,a, b):        '''recursively merges dict's. not just simple a['key'] = b['key'], if        both a and bhave a key who's value is a dict then dict_merge is called        on both values and the result stored in the returned dictionary.'''        if not isinstance(b, dict):            return b        result = copy.deepcopy(a)        for k, v in b.iteritems():            if k in result and isinstance(result[k], dict):                    result[k] = dict_merge(result[k], v)            else:                result[k] = copy.deepcopy(v)        return result    def combineThings(self):        author_id = []        tempDict ={}        # get a list of ids and author_ids for every message        for author in posts.find():            author_id.append( (author['Name'], author['PlayerID'], author['Tm'], author['Year']))        # iterate through every author_ids to find the corresponding username        for name,id,team,year in author_id:            tempDict = {}            message = posts.find({"Name": name, "Tm": team, "PlayerID": id,"Year":year})            tempDict = message[0]            for item in message:                tempDict = self.dict_merge(tempDict,item)            self.tempList.append(tempDict)    def getPosts(self):        for post in posts.find({"Year":"2013"}):            print posttest1 = BaseballReference()# Sim.getBatterStats()## Sim.getBatterStats2()# Sim.getPosts()test1.combineThings()print [item for item in test1.tempList if item['PlayerID'] == 'accarje01']